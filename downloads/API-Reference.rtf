{\rtf1\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{\f0\fswiss\fcharset0 Arial;}{\f1\fmodern\fprq1\fcharset0 Consolas;}{\f2\fnil Consolas;}{\f3\fnil\fcharset0 Consolas;}{\f4\fnil\fcharset2 Symbol;}}
{\colortbl ;\red255\green0\blue0;\red0\green0\blue0;\red232\green242\blue254;\red255\green255\blue255;\red0\green0\blue192;\red163\green21\blue21;\red0\green0\blue255;\red0\green128\blue0;\red128\green0\blue64;}
{\*\generator Msftedit 5.41.21.2508;}\viewkind4\uc1\pard\ri-1800\qc\f0\fs48 MilanEx API Document\par
\par
\pard\ri-1800\cf1\ul\fs24 Note: All API queries are case sensitive!\cf0\ulnone\par
\ul\b\par
\ulnone\b0 The API can be accessed via the GET method. API responses are JSON encoded.\par
\par
Upon access, the following variables are are returned:\par
\pard{\pntext\f4\'B7\tab}{\*\pn\pnlvlblt\pnf4\pnindent0{\pntxtb\'B7}}\fi-720\li720\ri-1800 Status: Returns a string of "Success" or "Failed")\par
{\pntext\f4\'B7\tab}Errors: Returns a string of what went wrong. This will only exist if Status is "Failed", otherwise it will be NULL.\par
{\pntext\f4\'B7\tab}Results: Returns an array of the requested results if Status is "Success", otherwise it will be NULL.\par
\pard\ri-1800\ul\b\par
\cf1\b0 Sample code is at the very bottom.\cf0\b\par
\par
Private Methods (requires user validation)\par
\ulnone\b0 Note: you will have to generate api key on the api page to use private methods.\par
\par
Method: \f1\fs20 GetPrivTradeHistory\f0\fs24\par
Parameters: \f1\fs20 Pub (api key), Priv (api key), MarketId (int), Limit (int) (optional, defaults to 10)\par
\f0\fs24 Description: \f1\fs20 Retrieves a user's trade history for the specified market.\par
\f0\fs24 Example Usage: \f1\fs20 https://www.www.milancoin.org/milanex/api.php?Pub=ajs39r0uay8ryhw3k3hawkr3rcnw387&Priv=982q34y2n33acknrykawr3nrcw3araw&Method=GetPrivTradeHistory&MarketId=104&Limit=20\f0\fs24\par
Example Output: \par
\cf2\highlight3\f2\fs20\{\par
\}\par
\f3\par
\cf0\highlight0\f0\fs24 Method: \f1\fs20 GetBalance\f0\fs24\par
Parameters: \f1\fs20 Pub (api key), Priv (api key), MarketId (int)\par
\f0\fs24 Description: \f1\fs20 Retrieves the user's available balance for the specified market.\par
\f0\fs24 Example Usage: \f1\fs20 https://www.www.milancoin.org/milanex/api.php?Pub=ajs39r0uay8ryhw3k3hawkr3rcnw387&Priv=982q34y2n33acknrykawr3nrcw3araw&Method=GetBalance&MarketId=104\f0\fs24\par
Example Output: \par
\cf2\highlight3\f2\fs20\{\par
\}\par
\f3\par
\cf0\highlight0\f0\fs24 Method: \f1\fs20 CreateNewTrade\f0\fs24\par
Parameters: \f1\fs20 Pub (api key), Priv (api key), Price (float), Amount (float), Type (string, BUY or SELL) MarketId (int)\par
\f0\fs24 Description: \f1\fs20 Creates a new buy or sell order with the specified details.\par
\f0\fs24 Example Usage: \f1\fs20 https://www.www.milancoin.org/milanex/api.php?Pub=ajs39r0uay8ryhw3k3hawkr3rcnw387&Priv=982q34y2n33acknrykawr3nrcw3araw&Method=CreateNewTrade&Price=0.00000090&Amount=11000.92&Type=SELL&MarketId=98\f0\fs24\par
Example Output: \par
\cf2\highlight3\f2\fs20\{\par
\}\par
\cf0\highlight0\f0\fs24\par
\ul\b Public Methods (does not require a user)\par
\par
\ulnone\b0 Method: \f1\fs20 GetTradeHistory\f0\fs24\par
Parameters: \f1\fs20 MarketId (int), Limit (int)\par
\f0\fs24 Description: \f1\fs20 Retrieves the trading history for the specified market starting with the most recent up to the value of Limit.\par
\f0\fs24 Example Usage: \f1\fs20 https://www.milancoin.org/milanex/api.php?Method=GetTradeHistory&MarketId=104&Limit=10\f0\fs24\par
Example Output: \par
\cf2\highlight3\f2\fs20\{\par
\f3\tab\f2 "Status":"Success",\par
\f3\tab\f2 "Results"\f3 :\par
\tab\tab\f2 [\{"Quantity":"0.05529297",\par
\f3\tab\tab   \f2 "PricePer":"0.03300000",\par
\f3\tab\tab   \f2 "Total":"0.00182467",\par
\f3\tab\tab   \f2 "Timestamp":"1390826769"\},\par
\f3\tab\tab  \f2\{"Quantity":"0.01248238",\par
\f3\tab\tab   \f2 "PricePer":"0.02550000",\par
\f3\tab\tab   \f2 "Total":"0.00031830",\par
\f3\tab\tab   \f2 "Timestamp":"1390800688"\},\par
\f3\tab\tab  \f2\{"Quantity":"0.00000006",\par
\f3\tab\tab   \f2 "PricePer":"0.02600000",\par
\f3\tab\tab   \f2 "Total":"0.00000000",\par
\f3\tab\tab   \f2 "Timestamp":"1390796135"\},\par
\f3\tab\tab  \f2\{"Quantity":"0.26581522",\par
\f3\tab\tab   \f2 "PricePer":"0.02550000",\par
\f3\tab\tab   \f2 "Total":"0.00677829",\par
\f3\tab\tab   \f2 "Timestamp":"1390775303"\},\par
\f3\tab\tab  \f2\{"Quantity":"0.03090353",\par
\f3\tab\tab   \f2 "PricePer":"0.02550000",\par
\f3\tab\tab   \f2 "Total":"0.00078804",\par
\f3\tab\tab   \f2 "Timestamp":"1390771726"\},\par
\f3\tab\tab  \f2\{"Quantity":"0.35117647",\par
\f3\tab\tab   \f2 "PricePer":"0.02550000",\par
\f3\tab\tab   \f2 "Total":"0.00895500",\par
\f3\tab\tab   \f2 "Timestamp":"1390769564"\},\par
\f3\tab\tab  \f2\{"Quantity":"0.09699182",\par
\f3\tab\tab   \f2 "PricePer":"0.02550000",\par
\f3\tab\tab   \f2 "Total":"0.00247329",\par
\f3\tab\tab   \f2 "Timestamp":"1390768980"\},\par
\f3\tab\tab  \f2\{"Quantity":"0.00001760",\par
\f3\tab\tab   \f2 "PricePer":"0.02600000",\par
\f3\tab\tab   \f2 "Total":"0.00000046",\par
\f3\tab\tab   \f2 "Timestamp":"1390697719"\}]\par
\}\par
\f3\par
\cf0\highlight0\f0\fs24 Method: \f1\fs20 GetMarketData\f0\fs24\par
Parameters: \f1\fs20 MarketId (int)\par
\f0\fs24 Description: \f1\fs20 Retrieves the market data from one market.\par
\f0\fs24 Example Usage: \f1\fs20 https://www.milancoin.org/milanex/api.php?Method=GetMarketData&MarketId=104\f0\fs24\par
Example Output: \par
\cf2\highlight3\f2\fs20\{\par
\f3  \f2 "Status":"Success",\par
\f3  \f2 "Results":\par
\f3\tab\f2 [\{"MarketId":"104",\par
\f3\tab   \f2 "Name":"Astrocoin",\par
\f3\tab   \f2 "Acronymn":"ASR",\par
\f3\tab   \f2 "LastTradePrice":false,\par
\f3\tab   \f2 "SellOrders":\par
\f3\tab\tab\f2 [\{"Quantity":"4.00000000",\par
\f3\tab\tab   \f2 "PricePer":"0.04700000",\par
\f3\tab\tab   \f2 "Total":"0.18800000"\},\par
\f3\tab\tab  \f2\{"Quantity":"6.00000000",\par
\f3\tab\tab   \f2 "PricePer":"0.04800000",\par
\f3\tab\tab   \f2 "Total":"0.28800000"\},\par
\f3\tab\tab  \f2\{"Quantity":"10.00000000",\par
\f3\tab\tab   \f2 "PricePer":"0.04880000",\par
\f3\tab\tab   \f2 "Total":"0.48800000"\},\par
\f3\tab\tab  \f2\{"Quantity":"5.00000000",\par
\f3\tab\tab   \f2 "PricePer":"0.04900000",\par
\f3\tab\tab   \f2 "Total":"0.24500000"\},\par
\f3\tab\tab  \f2\{"Quantity":"4.00000000",\par
\f3\tab\tab   \f2 "PricePer":"0.04950000",\par
\f3\tab\tab   \f2 "Total":"0.19800000"\}],\par
\f3\tab\f2 "BuyOrders":\par
\f3\tab\tab\f2 [\{"Quantity":"50745.00000000",\par
\f3\tab\tab   \f2 "PricePer":"0.00000001",\par
\f3\tab\tab   \f2 "Total":"0.00050745"\},\par
\f3\tab\tab  \f2\{"Quantity":"9.51021000",\par
\f3\tab\tab   \f2 "PricePer":"0.00010000",\par
\f3\tab\tab   \f2 "Total":"0.00095102"\}]\par
\f3\tab\f2\}]\par
\}\par
\f3\par
\cf0\highlight0\f0\fs24 Method: \f1\fs20 GetConversion\f0\fs24\par
Parameters: \f1\fs20 MarketId (int), Amount (float), Acronym (unused?)\par
\f0\fs24 Description: \f1\fs20 Converts amount specified to its MLC equivelant based on the rate that the last trade occurred at.\par
\f0\fs24 Example Usage: \f1\fs20 https://www.milancoin.org/milanex/api.php?Method=GetConversion&MarketId=98&Amount=1000.1\f0\fs24\par
Example Output: \par
\cf2\highlight3\f2\fs20\{\par
\f3  \f2 "Status":"Success",\par
\f3  \f2 "Results":\par
\f3\tab\f2 [\{"Total":"0.02000200",\par
\f3\tab   \f2 "Acronymn":"MLC"\}]\par
\}\par
\cf0\highlight0\ul\b\f0\par
\fs24 Example Implementation\par
\par
\pard\li720\ri-1800\cf2\highlight4\ulnone\f2\fs20 <?php\cf0\highlight0\b0\par
\par
\cf5\highlight4\b function \cf6\b0 query_api\cf2\b (\b0 $method, \cf7 array \cf2 $args \cf7 = array\cf2\b ()) \b0\{\cf0\highlight0\par
\highlight4         \cf8 // API settings\cf0\highlight0\par
\highlight4         \cf2 $pub \cf7 =\cf0  \cf2\b '';\cf0\b0  \cf8 // your public API-key\cf0\highlight0\par
\highlight4         \cf2 $priv \cf7 =\cf0  \cf2\b '';\cf0\b0  \cf8 // your private API-key\cf0\highlight0\par
\highlight4  \highlight0\par
\highlight4         \cf2 $args\cf7 [\cf2\b '\cf7\b0 Method\cf2\b '\cf7\b0 ] = \cf2 $method\b ;\cf0\highlight0\b0\par
\highlight4        \highlight0\par
\highlight4         \cf8 // create the get data\cf0\highlight0\par
\highlight4         \cf2 $get \cf7 = \cf2 http_build_query($args,\cf0  \cf2\b ''\b0 ,\cf0  \cf2\b '\cf7\b0 &\cf2\b '\b0 )\b ;\cf0\highlight0\b0\par
\par
\highlight4         \cf8 // curl handle\cf0\highlight0\par
\highlight4         \cf2 static $hCurl \cf7 = \cf9 null\cf2\b ;\cf0\highlight0\b0\par
\cf2\highlight4\b         \cf7\b0 if \cf2 (is_null($hCurl)) \{\cf0\highlight0\par
\cf2\highlight4                 $hCurl \cf7 = \cf2 curl_init()\b ;\cf0\highlight0\b0\par
\cf2\highlight4\b                 \b0 curl_setopt($hCurl, \cf7 CURLOPT_RETURNTRANSFER\cf2 , \cf9 true\cf2 )\b ;\cf0\highlight0\b0\par
\cf2\highlight4\b                 \b0 curl_setopt($hCurl, \cf7 CURLOPT_USERAGENT\cf2 ,\cf0  \cf2\b '\cf7\b0 Mozilla/4.0 (compatible; MilanEx API PHP client; \cf2\b '\b0 .php_uname(\b '\cf7\b0 s\cf2\b '\b0 ).\b '\cf7\b0 ; PHP/\cf2\b '\b0 .phpversion().\b '\cf7\b0 )\cf2\b '\b0 )\b ;\cf0\highlight0\b0\par
\cf2\highlight4\b         \b0\}\cf0\highlight0\par
\cf2\highlight4\tab\tab $request \cf7 =\cf0  \cf2\b '\cf0\b0 https://www.milancoin.org/milanex/api.php?\b '\b0 .$get\cf2\b ;\cf0\highlight0\b0\par
\cf2\highlight4\b         \b0 curl_setopt($hCurl, \cf7 CURLOPT_URL\cf2 , $request)\b ;\cf0\highlight0\b0\par
\cf2\highlight4\b\tab\tab\b0 curl_setopt($hCurl, \cf7 CURLOPT_HEADER\cf2 , 0)\b ;\cf0\highlight0\b0\par
\cf2\highlight4\b         \b0 curl_setopt($hCurl, \cf7 CURLOPT_SSL_VERIFYPEER\cf2 , \cf9 FALSE\cf2 )\b ;\cf0\highlight0\b0\par
\highlight4  \highlight0\par
\highlight4         \cf8 // execute the query\cf0\highlight0\par
\highlight4         \cf2 $result \cf7 = \cf2 curl_exec($hCurl)\b ;\cf0\highlight0\b0\par
\cf2\highlight4\b         \cf7\b0 if \cf2 ($result \cf7 === \cf9 false\cf2 ) \cf7 throw new \cf2 Exception(\b '\cf7\b0 Could not get reply: \cf2\b '\b0 .curl_error($hCurl))\b ;\cf0\highlight0\b0\par
\cf2\highlight4\b\tab\tab\b0 curl_close($hCurl)\b ;\cf0\highlight0\b0\par
\highlight4\tab\tab\cf8 // format the data\cf0\highlight0\par
\highlight4         \cf2 $decoded \cf7 = \cf2 json_decode($result, \cf9 true\cf2 )\b ;\cf0\highlight0\b0\par
\cf2\highlight4\b         \cf7\b0 if \cf2 (\cf7 !\cf2 $decoded) \cf7 throw new \cf2 Exception(\b '\cf7\b0 Invalid data received, please make sure connection is working and requested API exists\cf2\b '\b0 )\b ;\cf0\highlight0\b0\par
\cf2\highlight4\b         \cf7\b0 return \cf2 $decoded\b ;\cf0\highlight0\b0\par
\cf2\highlight4\}\cf0\highlight0\par
\cf2\highlight4  \cf0\highlight0\par
\cf2\highlight4 $result \cf7 = \cf2 query_api(\b "\cf7\b0 GetMarketData\cf2\b "\b0 , \cf7 array\cf2 (\b "\cf7\b0 MarketId\cf2\b "\cf0\b0  \cf2 => 104))\b ;\cf0\highlight0\b0\par
\cf2\highlight4 echo\cf0  \cf2\b "\cf7\b0 <pre><u><b>Status:</u></b> \cf2\b "\b0 .$result\cf7 [\cf2\b '\cf7\b0 Status\cf2\b '\cf7\b0 ]\cf2 .\b "\cf7\b0 <br>\cf2\b ";\cf0\highlight0\b0\par
\cf2\highlight4 echo\cf0  \cf2\b "\cf7\b0 <u><b>Results:</u></b><br><pre> \cf2\b "\b0 .print_r($result\cf7 [\cf2\b '\cf7\b0 Results\cf2\b '\cf7\b0 ]\cf2 , \cf9 true\cf2 ).\b "\cf7\b0 </pre></pre><br>\cf2\b ";\cf0\highlight0\b0\par
\cf2\highlight3\b ?>\cf0\highlight0\ul\f0\par
}
 